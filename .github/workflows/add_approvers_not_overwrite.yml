name: Add Approvers to Environments

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        type: choice
        options: ['dev', 'pre', 'pro']
        default: 'dev'
      approver:
        description: 'Username of the approver'
        required: true
        default: 'approver_username'

jobs:
  add-approvers:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get team ID
        id: get_team_id
        env:
          ORGANIZATION: ${{ vars.ORGANIZATION }}
          APPROVER: ${{ inputs.approver }}
        run: |
          TEAM_ID=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" https://api.github.com/orgs/$ORGANIZATION/teams/$APPROVER | jq -r ".id")
          echo "TEAM_ID=$TEAM_ID" >> $GITHUB_OUTPUT

      - name: Process reviewers
        id: process_reviewers
        env:
          ORGANIZATION: ${{ vars.ORGANIZATION }}
          ENVIRONMENT: ${{ inputs.environment }}
        run: |
          repo="your-repo-name" # replace this with your repo variable

          # Get existing reviewers
          ENV_DETAILS=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" \
            "https://api.github.com/repos/$ORGANIZATION/$repo/environments/$ENVIRONMENT")
          echo "Environment details: $ENV_DETAILS"

          EXISTING_REVIEWERS=$(echo "$ENV_DETAILS" | jq -r '.protection_rules[] | select(.type=="required_reviewers") | .reviewers[].reviewer | @base64')
          echo "Existing reviewers: $EXISTING_REVIEWERS"

          REVIEWERS_ARRAY=""

          for reviewer in $EXISTING_REVIEWERS; do
            reviewer_json=$(echo $reviewer | base64 --decode)
            reviewer_id=$(echo $reviewer_json | jq -r '.id')
            REVIEWERS_ARRAY="${REVIEWERS_ARRAY}{\"type\":\"Team\",\"id\":$reviewer_id},"
          done

          # Remove the last comma
          REVIEWERS_ARRAY=${REVIEWERS_ARRAY%,}

          # Add the new reviewer ID if it does not exist
          NEW_REVIEWER_ID=${{ steps.get_team_id.outputs.TEAM_ID }}
          if ! echo "$REVIEWERS_ARRAY" | grep -q "\"id\":$NEW_REVIEWER_ID"; then
            REVIEWERS_ARRAY="${REVIEWERS_ARRAY},{\"type\":\"Team\",\"id\":$NEW_REVIEWER_ID}"
          fi

          # Output the result
          echo "REVIEWERS_ARRAY=[$REVIEWERS_ARRAY]" >> $GITHUB_OUTPUT
          echo "Updated reviewers array: [$REVIEWERS_ARRAY]"

      - name: Add Approvers to Environments
        env:
          ORGANIZATION: ${{ vars.ORGANIZATION }}
          ENVIRONMENT: ${{ inputs.environment }}
          REVIEWERS_ARRAY: ${{ steps.process_reviewers.outputs.REVIEWERS_ARRAY }}
        run: |
          while read -r repo; do
            ENV_ID=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" \
              "https://api.github.com/repos/$ORGANIZATION/$repo/environments" | jq -r ".environments[] | select(.name==\"$ENVIRONMENT\") | .id")

            if [ -z "$ENV_ID" ]; then
              echo "Environment $ENVIRONMENT not found in repository $repo"
              continue
            fi

            # Update environment with new list of reviewers
            curl -s -L \
              -X PUT \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GH_PAT }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/$ORGANIZATION/$repo/environments/$ENVIRONMENT" \
              -d '{"reviewers":'"$REVIEWERS_ARRAY"',"deployment_branch_policy":null}'

            echo "Approver $APPROVER added to environment $ENVIRONMENT in repository $repo"

          done < repos.txt