name: Add Approvers to Environments

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        type: choice
        options: ['dev', 'pre', 'pro']
        default: 'dev'
      approver:
        description: 'Username of the approver'
        required: true
        default: 'approver_username'

jobs:
  add-approvers:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get team ID
        id: get_team_id
        env:
          ORGANIZATION: ${{ vars.ORGANIZATION }}
          APPROVER: ${{ inputs.approver }}
        run: |
          TEAM_ID=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" https://api.github.com/orgs/$ORGANIZATION/teams/$APPROVER | jq -r ".id")
          echo "TEAM_ID=$TEAM_ID" >> $GITHUB_OUTPUT

      - name: Add Approvers to Environments
        env:
          ORGANIZATION: ${{ vars.ORGANIZATION }}
          ENVIRONMENT: ${{ inputs.environment }}
          APPROVER: ${{ inputs.approver }}
        run: |
          while read -r repo; do
            ENV_ID=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" \
              "https://api.github.com/repos/$ORGANIZATION/$repo/environments" | jq -r ".environments[] | select(.name==\"$ENVIRONMENT\") | .id")

            if [ -z "$ENV_ID" ]; then
              echo "Environment $ENVIRONMENT not found in repository $repo"
              continue
            fi

            # Get existing reviewers
            ENV_DETAILS=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" \
              "https://api.github.com/repos/$ORGANIZATION/$repo/environments/$ENVIRONMENT")
            echo "Environment details: $ENV_DETAILS"
            
            EXISTING_REVIEWERS=$(echo "$ENV_DETAILS" | jq '.reviewers')
            echo "Existing reviewers: $EXISTING_REVIEWERS"

            # If EXISTING_REVIEWERS is null, initialize it as an empty array
            if [ "$EXISTING_REVIEWERS" == "null" ]; then
              EXISTING_REVIEWERS="[]"
            fi

            echo "Existing reviewers for $repo in $ENVIRONMENT:"
            echo "$EXISTING_REVIEWERS" | jq

            # Add new reviewer to the list
            UPDATED_REVIEWERS=$(echo "$EXISTING_REVIEWERS" | jq ". += [{\"type\": \"Team\", \"id\": ${{ steps.get_team_id.outputs.TEAM_ID }} }]")

            # Update environment with new list of reviewers
            curl -s -L \
              -X PUT \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GH_PAT }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/$ORGANIZATION/$repo/environments/$ENVIRONMENT" \
              -d "{\"prevent_self_review\":false,\"reviewers\":$UPDATED_REVIEWERS,\"deployment_branch_policy\":null}"

            # Get reviewers after update
            NEW_REVIEWERS=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" \
              "https://api.github.com/repos/$ORGANIZATION/$repo/environments/$ENVIRONMENT" | jq '.reviewers')

            echo "Reviewers for $repo in $ENVIRONMENT after adding $APPROVER:"
            echo "$NEW_REVIEWERS" | jq

            echo "Approver $APPROVER added to environment $ENVIRONMENT in repository $repo"

          done < repos.txt