name: Add Approvers Matrix

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        type: choice
        options: ['dev', 'pre', 'pro']
        default: 'dev'
      approver:
        description: 'Username of the approver'
        required: true
        default: 'approver_username'

jobs:
  read_repos_json:
    name: Read configuration.json used for Matrix
    runs-on: ubuntu-latest
    outputs:
      repos: ${{steps.get-repo-name.outputs.matrix}}
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3

      - name: Get configs var
        id: get-repo-name
        run: |
          JSON=$(cat repository.json)
          echo "matrix=${JSON}" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy in multiple repos
    runs-on: ubuntu-latest
    needs: [read_repos_json]
    strategy:
      matrix:
        repo: ${{ fromJson(needs.read_repos_json.outputs.repos).repo_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get team ID
        id: get_team_id
        env:
          ORGANIZATION: ${{ vars.ORGANIZATION }}
          APPROVER: ${{ inputs.approver }}
        run: |
          TEAM_ID=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" https://api.github.com/orgs/$ORGANIZATION/teams/$APPROVER | jq -r ".id")
          echo "TEAM_ID=$TEAM_ID" >> $GITHUB_OUTPUT

      - name: Process reviewers
        id: process_reviewers
        env:
          ORGANIZATION: ${{ vars.ORGANIZATION }}
          ENVIRONMENT: ${{ inputs.environment }}
          REPO: ${{ matrix.repo }}
        run: |
          # Get existing reviewers
          ENV_DETAILS=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" \
            "https://api.github.com/repos/$ORGANIZATION/$REPO/environments/$ENVIRONMENT")
          echo "Environment details: $ENV_DETAILS"

          EXISTING_REVIEWERS=$(echo "$ENV_DETAILS" | jq -r '.protection_rules[] | select(.type=="required_reviewers") | .reviewers[].reviewer')

          REVIEWERS_ARRAY="[]"

          if [ -n "$EXISTING_REVIEWERS" ]; then
            echo "Found  some reviewers in the Repo"
            REVIEWERS_ARRAY=$(echo "$EXISTING_REVIEWERS" | jq -c '[.[] | {type: "Team", id: .id}]')
          fi

          # Add the new reviewer ID if it does not exist
          NEW_REVIEWER_ID=${{ steps.get_team_id.outputs.TEAM_ID }}
          if ! echo "$REVIEWERS_ARRAY" | jq -e ".[] | select(.id==$NEW_REVIEWER_ID)" > /dev/null; then
            REVIEWERS_ARRAY=$(echo "$REVIEWERS_ARRAY" | jq -c ". + [{\"type\": \"Team\", \"id\": $NEW_REVIEWER_ID}]")
          fi

          # Output the result
          echo "REVIEWERS_ARRAY=$REVIEWERS_ARRAY" >> $GITHUB_OUTPUT
          echo "Updated reviewers array: $REVIEWERS_ARRAY"

      - name: Add Approvers to Environments
        env:
          ORGANIZATION: ${{ vars.ORGANIZATION }}
          ENVIRONMENT: ${{ inputs.environment }}
          REVIEWERS_ARRAY: ${{ steps.process_reviewers.outputs.REVIEWERS_ARRAY }}
          REPO: ${{ matrix.repo }}
        run: |
          ENV_ID=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" \
            "https://api.github.com/repos/$ORGANIZATION/$REPO/environments" | jq -r ".environments[] | select(.name==\"$ENVIRONMENT\") | .id")

          if [ -z "$ENV_ID" ]; then
            echo "Environment $ENVIRONMENT not found in repository $REPO"
            exit 1
          fi

          # Update environment with new list of reviewers
          curl -s -L \
            -X PUT \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GH_PAT }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/$ORGANIZATION/$REPO/environments/$ENVIRONMENT" \
            -d '{"reviewers":'"$REVIEWERS_ARRAY"',"deployment_branch_policy":null}'

          echo "Approver ${{ inputs.approver }} added to environment $ENVIRONMENT in repository $REPO"
